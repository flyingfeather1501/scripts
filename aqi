#!/usr/bin/env racket
#lang at-exp racket

(require net/url
         data/collection
         threading
         json)

; I definitely should not put this here... whatever
(define term/bold "$(tput bold)")
(define term/normal "$(tput sgr0)")
(define term/red "$(tput setaf 1)")
(define term/green "$(tput setaf 2)")
(define term/orange "$(tput setaf 3)")
(define term/magenta "$(tput setaf 4)")
@define[term/darkpurple]{"\033[38;5;91m"}
@define[term/yellow]{"\033[38;5;220m"}

(define (echo string
              #:prefix [prefix ""]
              #:suffix [suffix term/normal])
  (void (system (string-append "echo -en " prefix
                               string
                               suffix))))

(define (get-json url #:cleanup [cleanup identity])
   (call/input-url (string->url url)
                   get-pure-port
                   (λ (port)
                     (~> port
                         port->string
                         cleanup ; for when the input has something like "\r\n    "
                         string->jsexpr))))

(define AQI.json (get-json "http://opendata2.epa.gov.tw/AQI.json"))

(define sites
  (~> (map (λ (x) (ref x 'SiteName))
           AQI.json)
      sequence->list))

(define (list-sites)
  (displayln (string-join sites)))

(define (aqi [sitename "士林"])
  (unless (member sitename sites)
    (error 'aqi "觀測站「~a」不存在" sitename))

  (define local.json
    (~> AQI.json
        (filter (λ (x) (equal? (hash-ref x 'SiteName) sitename))
                _)
        first))

  (echo "AQI: " #:prefix term/bold #:suffix term/normal)
  (echo (ref local.json 'AQI)
        #:prefix
        (let ([aqi (string->number (ref local.json 'AQI))])
          (cond
            [(> aqi 300) term/darkpurple]
            [(> aqi 200) term/magenta]
            [(> aqi 150) term/red]
            [(> aqi 100) term/orange]
            [(> aqi 50) term/yellow]
            [(<= aqi 50) term/green]
            [else term/normal])))

  (displayln @string-append{ (@ref[local.json 'County]/@sitename)}))

(define (display-help)
 (displayln
 @string-append{
  aqi [觀測站]: 回報觀測站AQI
  aqi [-l|--list]: 觀測站列表
  aqi [-h|--help]: 顯示本說明}))

(if (empty? (vector->list (current-command-line-arguments)))
    (aqi)
    (case (first (current-command-line-arguments))
      [("-l" "--list") (list-sites)]
      [("-h" "--help") (display-help)]
      [else (aqi (first (current-command-line-arguments)))]))

;; vim: filetype=racket
;; http://ergoemacs.org/emacs_manual/emacs/Specifying-File-Variables.html
;; Local Variables:
;; mode: racket
;; End:
